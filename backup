import rawData from './data.json' assert { type: "json" };
let numbers = rawData.rawData;

let container = document.getElementById("array");
let divList = document.getElementsByClassName('block');
console.log(divList);

function generatearray() {
    for (let i = 0; i < numbers.length; i++) {
        let value = numbers[i];
        container.innerHTML += `
            <div class="block" data-transform="${i * 30}" style="height: ${value * 3}px; transform: translate(${i * 30}px);">
                <label class="element_value">${value}</label>
            </div>
        `
    }
}

generatearray();

function render(v, t) {
    let element = document.createElement("div");
    let value = v;
    let transform = t;

    // Thêm css cho thẻ div
    element.classList.add("block");
    element.style.height = `${value * 3}px`;
    element.style.transform = `translate(${transform}px)`;
    element.dataset.transform = transform;

    // Tạo nhãn kí hiệu giá trị tương ứng của thẻ div
    let numberLabel = document.createElement("label");
    numberLabel.classList.add("element_value");
    numberLabel.innerText = value;

    element.appendChild(numberLabel);
    container.appendChild(element);
}

function changePosition(element) {
    return new Promise((resolve) => {
        let position = Number(element.dataset.transform);
        window.requestAnimationFrame(function () {
            // Đợi 0.25s
            setTimeout(() => {
                element.style.transform = `translate(${position + 30}px)`;
                resolve();
            }, 250);
        });
    })
}

function addNumber(value) {
    numbers = [...numbers, value];
}

function insertNumber(index, value) {
    let length = divList.length;

    // Neu index <= 0 => Them vao dau
    if(index <= 0){
        index = 0;
    }
    //neu index >= n thi gan index = n de them vao cuoi mang
    if(index >= length){
        index = length;
    }
    // lưu vị trí hiện tại của index
    let position = Number(divList[index].dataset.transform);
    //dich chuyen cac phan tu 
    for(let i = length-1; i > index; i--){
        divList[i].style.transform = divList[i-1].style.transform;
    }
    // for(let i=index; i<length; i++){
    //     changePosition(divList[i]);
    // }

    //them value vao vi tri index
    // render(value, position)
    
}

function swap(element1, element2) {
    return new Promise((resolve) => {

        // Để đổi css của hai element
        let temp = element1.style.transform; // lưu vị trí của el1 vào temp
        element1.style.transform = element2.style.transform;
        element2.style.transform = temp;

        window.requestAnimationFrame(function () {
            // Đợi 0.25s
            setTimeout(() => {
                //chèn element2 lên trước element1
                container.insertBefore(element2, element1);
                resolve();
            }, 250);
        });
    });
}

// Asynchronous BubbleSort function
async function BubbleSort(delay = 100) {
    let blocks = document.querySelectorAll(".block");

    // BubbleSort Algorithm
    for (let i = 0; i < blocks.length; i += 1) {
        for (let j = 0; j < blocks.length - i - 1; j += 1) {

            // Đổi màu các phần tử được so sánh
            blocks[j].style.backgroundColor = "#FF4949";
            blocks[j + 1].style.backgroundColor = "#FF4949";

            // đợi 100ms
            await new Promise((resolve) =>
                setTimeout(() => {
                    resolve();
                }, delay)
            );

            let value1 = Number(blocks[j].childNodes[0].innerHTML); // đổi giá trị của block j sang kiểu số
            let value2 = Number(blocks[j + 1].childNodes[0].innerHTML);

            // So sánh giá trị j và j+1
            if (value1 > value2) {
                await swap(blocks[j], blocks[j + 1]);
                blocks = document.querySelectorAll(".block");
            }

            // Thay đổi màu về màu trước đó
            blocks[j].style.backgroundColor = "#6b5b95";
            blocks[j + 1].style.backgroundColor = "#6b5b95";
        }

        // đổi màu khối đại diện phần tử có giá trị lớn nhất
        blocks[blocks.length - i - 1].style.backgroundColor = "#13CE66";
    }
}

// Calling generatearray function
$('#add-btn').on('click', function (e) {
    e.preventDefault();
    let lastBlock = document.querySelector('.block:last-child');
    let value = Number($('#value').val());
    let transform = Number(lastBlock.dataset.transform) + 30;

    addNumber(value);
    render(value, transform);
    $('#value').val(null)
});

$('#insert-btn').on('click', function (e) {
    e.preventDefault();
    let value = Number($('#value').val());
    let index = Number($('#index').val());
    insertNumber(index, value);
    $('#value').val(null);
    $('#index').val(null);
});

$('#show-btn').on('click', function (e) {
    window.localStorage.setItem("data", JSON.stringify(rawData.rawData));
})

// Calling BubbleSort function
// BubbleSort();


